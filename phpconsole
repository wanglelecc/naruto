<?php
/****************************************************
 *                     phpConsole                   *
 *                                                  *
 * An object-oriented multi process manager for PHP *
 *                                                  *
 *                                                  *
 ****************************************************/

define('APP_PATH', __DIR__);

use Console\Manager;
use Console\Process;
use Console\ProcessException;
use Exception as Ex;
use App\demo\Test;
use Console\Config;

// require composer autoload file
require(__DIR__ . '/vendor/autoload.php');

/**
 * 命令行参数list
 */
$help = function () {
    $string =  <<<HELP
    \033[36m Usage \033[0m:
        php phpconsole --<arguments>=<value> ...

    \033[36m Example \033[0m:
        php start --worker-num=5 --passwd=123456

    \033[36m Params mean \033[0m:
        \033[33m worker-num \033[0m: Worker start number
        \033[33m passwd \033[0m: Unix user passwd
        \033[33m help \033[0m: Display command list

An object-oriented multi process manager for PHP

Version: 1.0.0
    \n
HELP;

    die($string);
};


/**
 * 获取参数
 */
if (count($argv) === 1) {
    $help();
}
$input = [];
foreach ($argv as $v) {
    preg_match_all('/^--(.*)/', $v, $match);
    if (isset($match[1][0]) && ! empty($match[1][0])) {
        $match = explode('=', $match[1][0]);
        if ($match[0] === 'help') {
            $help();
        }
        if (isset($match[1])) {
            $input[$match[0]] = $match[1];
        }
    }
}

$cmd = strtolower($argv['1'] ?? '');
//$ppid = intval(shell_exec("ps -ef | grep 'phpconsole' | grep 'master' | awk '{print $2}'"));
$ppid = file_exists('storage/temp/master.pid') ? intval(file_get_contents('storage/temp/master.pid')) : 0;

switch ($cmd){
	case 'start':
		if($ppid > 0){
			die( "phpconsole is already running...\n");
		}
		/**
		 * example
		 *
		 * $config = [
		 * 		'passwd' => '123456', // unix user passwd
		 * 		'worker_num' => 5, // worker start number
		 * 		'hangup_loop_microtime' => 200000, // master&worker hangup loop microtime unit/μs
		 * 		'pipe_dir' => '/tmp/', // the directory name of the process's pipe will be storaged
		 * ]
		 * new Manager($config, $closure)
		 */
		try {
			new Manager([
				'os'         => $input['os']?? 'Linux',
				'passwd' 	 => $input['passwd']?? '',
				'worker_num' => $input['worker-num']?? 5,
				// 'pipe_dir'   => '/tmp/phpconsole/'
				// 'hangup_loop_microtime' => 200000
			], function (Process $worker) {
				// mock business logic
				(new Test())->businessLogic($worker);
			}
			);
		} catch (Ex $e) {
			ProcessException::error([
				'msg' => [
					'msg'  => $e->getMessage(),
					'file' => $e->getFile(),
					'line' => $e->getLine(),
				]
			]);
		}
		break;
	case 'reload':
		if($ppid < 1){
			die("phpconsole is not running...\n");
		}

		posix_kill($ppid, SIGUSR1);

		echo "reload signal be sent success...\n";

		break;
	case 'quit':
		if($ppid < 1){
			die("phpconsole is not running...\n");
		}

		posix_kill($ppid, SIGUSR2);

		echo "quit signal be sent success...\n";

		break;
	case 'stop':
		if($ppid < 1){
			die("phpconsole is not running...\n");
		}

		posix_kill($ppid, SIGTERM);

		echo "stop signal be sent success...\n";

		break;
    case 'debug':

            var_dump(config('cache'));

            break;
	default :
		$help();
		break;
}
